substitutions:
  name: esphome-web-29e6b0
  friendly_name: esp32-c3-lcdkit

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.6.0
  name_add_mac_suffix: false
  project:
    name: esphome.web
    version: '1.0'

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

image:
  - file: 'images/logotipo_ondas_de_pipa.png'
    id: logo_ondas
    type: RGB565
    resize: 80x80
  - file: 'images/fundo_branco.png'
    id: fundo_branco
    type: RGB565
  - file: 'images/fundo_preto.png'
    id: fundo_preto
    type: RGB565

time:
  - platform: homeassistant
    id: esptime

# Enable logging
logger:

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:
- platform: esphome

# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  networks:
  - ssid: SSID1
    password: PASSWD1
  - ssid: SSID2
    password: PASSWD2
  # Set up a wifi access point
  ap:
    ssid: "LCDkit"
    password: "lcdkit123"

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device via WiFi AP.
captive_portal:

dashboard_import:
  package_import_url: github://esphome/firmware/esphome-web/esp32c3.yaml@main
  import_full_config: true

# Sets up Bluetooth LE (Only on ESP32) to allow the user
# to provision wifi credentials to the device.
esp32_improv:
  authorizer: none

# To have a "next url" for improv serial
web_server:

text_sensor:
    - platform: homeassistant
      id: sensor_simples
      entity_id: sensor.sensor_simples_temperature
      internal: true

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO9
      mode: INPUT_PULLUP
      inverted: true
    name: "SW Knob change page"
    on_press:
      then:
        - display.page.show_next: lcd_display
        - logger.log: "O CLICK FUNCIONA"
    
  - platform: homeassistant
    id: sensor_teste
    entity_id: binary_sensor.sensor_teste_contact
    internal: true

  - platform: homeassistant
    id: disjuntor
    entity_id: switch.disjuntor
    internal: true

  - platform: homeassistant
    id: varanda_201
    entity_id: binary_sensor.flat_201_varanda_contact
    internal: true

  - platform: homeassistant
    id: varanda_202
    entity_id: binary_sensor.flat_202_varanda_contact
    internal: true

  - platform: homeassistant
    id: varanda_203
    entity_id: binary_sensor.flat_203_varanda_contact
    internal: true

  - platform: homeassistant
    id: varanda_204
    entity_id: binary_sensor.flat_204_varanda_contact
    internal: true

  - platform: homeassistant
    id: varanda_205
    entity_id: binary_sensor.flat_205_varanda_contact
    internal: true

sensor:
  - platform: rotary_encoder
    name: "Rotary Encoder"
    pin_a:
      number: GPIO10
      mode:
        input: true
        pullup: true
    pin_b:
      number: GPIO6
      mode:
        input: true
        pullup: true
    resolution: 1
    on_clockwise:
      - logger.log: "Turned Clockwise"
      - display.page.show_next: lcd_display
      - component.update: lcd_display
    on_anticlockwise:
      - logger.log: "Turned Anticlockwise"
      - display.page.show_previous: lcd_display
      - component.update: lcd_display
  - platform: wifi_signal
    name: "WiFi LCDKIT"
    update_interval: 60s

external_components:
  - source: github://smkent/esphome@main
    components: [ gc9a01 ]

# light:
#   - platform: esp32_rmt_led_strip
#     rmt_channel: 0
#     rgb_order: GRB
#     chipset: WS2812
#     pin: GPIO8
#     num_leds: 1
#     name: "LCDKIT RGB"

spi:
  clk_pin: GPIO1
  mosi_pin: GPIO0

display:
  - platform: gc9a01
    id: lcd_display
    cs_pin: GPIO7
    dc_pin: GPIO2
    update_interval: 1.25s
    rotation: 270
    width: 240
    height: 240
    pages:
      - id: page1
        lambda: |-
          it.image(0, 0, id(fundo_branco));
          it.image(80, 5, id(logo_ondas));
          if (id(varanda_201).state){
          it.printf(120, 90, id(font_16), id(color_purple), TextAlign::CENTER, "V.201: Aberta");
          } else {
          it.printf(120, 90, id(font_16), id(color_purple), TextAlign::CENTER, "V.201: Fechada");
          }
          if (id(varanda_202).state){
          it.printf(120, 105, id(font_16), id(color_purple), TextAlign::CENTER, "V.202: Aberta");
          } else {
          it.printf(120, 105, id(font_16), id(color_purple), TextAlign::CENTER, "V.202: Fechada");
          }
          if (id(varanda_203).state){
          it.printf(120, 120, id(font_16), id(color_purple), TextAlign::CENTER, "V.203: Aberta");
          } else {
          it.printf(120, 120, id(font_16), id(color_purple), TextAlign::CENTER, "V.203: Fechada");
          }
          if (id(varanda_204).state){
          it.printf(120, 135, id(font_16), id(color_purple), TextAlign::CENTER, "V.204: Aberta");
          } else {
          it.printf(120, 135, id(font_16), id(color_purple), TextAlign::CENTER, "V.204: Fechada");
          }
          if (id(varanda_205).state){
          it.printf(120, 150, id(font_16), id(color_purple), TextAlign::CENTER, "V.205: Aberta");
          } else {
          it.printf(120, 150, id(font_16), id(color_purple), TextAlign::CENTER, "V.205: Fechada");
          }
          if (id(sensor_teste).state){
          it.printf(120, 165, id(font_16), id(color_purple), TextAlign::CENTER, "Teste: Aberto");
          } else {
          it.printf(120, 165, id(font_16), id(color_purple), TextAlign::CENTER, "Teste: Fechado");
          }
          it.strftime(120, 200, id(font_16), id(color_black), TextAlign::CENTER, "%X - %x", id(esptime).now());
          it.printf(120, 215, id(font_16), id(color_black), TextAlign::CENTER, "pag. 1");
      - id: page2
        lambda: |-
          it.image(0, 0, id(fundo_branco));
          it.image(80, 5, id(logo_ondas));
          if (id(varanda_201).state){
          it.printf(120, 90, id(font_20), id(color_black), TextAlign::CENTER, "V.201: Fechada");
          } else {
          it.printf(120, 90, id(font_20), id(color_black), TextAlign::CENTER, "V.201: Aberta");
          }
          it.strftime(120, 200, id(font_16), id(color_black), TextAlign::CENTER, "%X - %x", id(esptime).now());
          it.printf(120, 215, id(font_16), id(color_black), TextAlign::CENTER, "pag. 2");
      - id: page3
        lambda: |-
          it.image(0, 0, id(fundo_branco));
          it.image(80, 5, id(logo_ondas));
          if (id(varanda_202).state){
          it.printf(120, 90, id(font_20), id(color_black), TextAlign::CENTER, "V.202: Fechada");
          } else {
          it.printf(120, 90, id(font_20), id(color_black), TextAlign::CENTER, "V.202: Aberta");
          }
          it.strftime(120, 200, id(font_16), id(color_black), TextAlign::CENTER, "%X - %x", id(esptime).now());
          it.printf(120, 215, id(font_16), id(color_black), TextAlign::CENTER, "pag. 3");
      - id: page4
        lambda: |-
          it.image(0, 0, id(fundo_branco));
          it.image(80, 5, id(logo_ondas));
          if (id(varanda_203).state){
          it.printf(120, 90, id(font_20), id(color_black), TextAlign::CENTER, "V.203: Fechada");
          } else {
          it.printf(120, 90, id(font_20), id(color_black), TextAlign::CENTER, "V.203: Aberta");
          }
          it.strftime(120, 200, id(font_16), id(color_black), TextAlign::CENTER, "%X - %x", id(esptime).now());
          it.printf(120, 215, id(font_16), id(color_black), TextAlign::CENTER, "pag. 4");
      - id: page5
        lambda: |-
          it.image(0, 0, id(fundo_branco));
          it.image(80, 5, id(logo_ondas));
          if (id(varanda_204).state){
          it.printf(120, 90, id(font_20), id(color_black), TextAlign::CENTER, "V.204: Fechada");
          } else {
          it.printf(120, 90, id(font_20), id(color_black), TextAlign::CENTER, "V.204: Aberta");
          }
          it.strftime(120, 200, id(font_16), id(color_black), TextAlign::CENTER, "%X - %x", id(esptime).now());
          it.printf(120, 215, id(font_16), id(color_black), TextAlign::CENTER, "pag. 5");
      - id: page6
        lambda: |-
          it.image(0, 0, id(fundo_branco));
          it.image(80, 5, id(logo_ondas));
          if (id(varanda_205).state){
          it.printf(120, 90, id(font_20), id(color_black), TextAlign::CENTER, "V.205: Fechada");
          } else {
          it.printf(120, 90, id(font_20), id(color_black), TextAlign::CENTER, "V.205: Aberta");
          }
          it.strftime(120, 200, id(font_16), id(color_black), TextAlign::CENTER, "%X - %x", id(esptime).now());
          it.printf(120, 215, id(font_16), id(color_black), TextAlign::CENTER, "pag. 6");
      - id: page7
        lambda: |-
          it.image(0, 0, id(fundo_branco));
          it.image(80, 5, id(logo_ondas));
          it.printf(120, 150, id(font_20), id(color_black), TextAlign::CENTER, "Temp: %s", id(sensor_simples).state.c_str());
          if (id(sensor_teste).state){
          it.printf(120, 90, id(font_20), id(color_black), TextAlign::CENTER, "Teste: Fechado");
          } else {
          it.printf(120, 90, id(font_20), id(color_black), TextAlign::CENTER, "Teste: Aberto");
          }
          it.strftime(120, 200, id(font_16), id(color_black), TextAlign::CENTER, "%X - %x", id(esptime).now());
          it.printf(120, 215, id(font_16), id(color_black), TextAlign::CENTER, "pag. 7");
      - id: page8
        lambda: |-
          it.image(0, 0, id(fundo_branco));
          it.image(80, 5, id(logo_ondas));
          double str_double = std::stod(id(sensor_simples).state.c_str());
          if (str_double < 24) {
          it.printf(120, 90, id(font_20), id(color_purple), TextAlign::CENTER, "Menor que 24");
          }
          else if (str_double < 27) {
          it.printf(120, 90, id(font_20), id(color_purple), TextAlign::CENTER, "Menor que 27");
          }
          else if (str_double < 30) {
          it.printf(120, 90, id(font_20), id(color_purple), TextAlign::CENTER, "Menor que 30");
          } else {
          it.printf(120, 90, id(font_20), id(color_purple), TextAlign::CENTER, "Maior que 30");            
          }
          it.strftime(120, 200, id(font_16), id(color_black), TextAlign::CENTER, "%X - %x", id(esptime).now());
          it.printf(120, 215, id(font_16), id(color_black), TextAlign::CENTER, "pag. 8");
      - id: page9
        lambda: |-
          it.image(0, 0, id(fundo_branco));
          it.image(80, 5, id(logo_ondas));
          if (id(disjuntor).state) {
          it.printf(120, 90, id(font_20), id(color_purple), TextAlign::CENTER, "Disj. ligado");
          }
          else {
          it.printf(120, 90, id(font_20), id(color_purple), TextAlign::CENTER, "Disj. off");
          }
          it.strftime(120, 200, id(font_16), id(color_black), TextAlign::CENTER, "%X - %x", id(esptime).now());
          it.printf(120, 215, id(font_16), id(color_black), TextAlign::CENTER, "pag. 8");

interval:
  - interval: 10s
    then:
      - display.page.show_next: lcd_display
      - component.update: lcd_display
    
font:
  - file: 'fonts/OpenSans-Medium.ttf'
    id: font_16
    size: 16

  - file: 'fonts/OpenSans-Medium.ttf'
    id: font_20
    size: 20

color:
  - id: color_black
    red: 0%
    green: 0%
    blue: 0%

  - id: color_purple
    red: 27%
    green: 13%
    blue: 37%

  - id: color_white
    red: 100%
    green: 100%
    blue: 100%
