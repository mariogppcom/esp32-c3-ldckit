substitutions:
  name: esphome-web-29e6b0
  friendly_name: esp32-c3-lcdkit

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.6.0
  name_add_mac_suffix: false
  project:
    name: esphome.web
    version: '1.0'

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

image:
  - file: 'images/logotipo_ondas_de_pipa.png'
    id: logo_ondas
    type: RGB565
    resize: 200x200

time:
  - platform: homeassistant
    id: esptime

# Enable logging
logger:

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:
- platform: esphome

# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  ssid: WIFI_2G
  password: decky@10
  # Set up a wifi access point
  ap:
    ssid: "LCDkit"
    password: "lcdkit123"

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device via WiFi AP.
captive_portal:

dashboard_import:
  package_import_url: github://esphome/firmware/esphome-web/esp32c3.yaml@main
  import_full_config: true

# Sets up Bluetooth LE (Only on ESP32) to allow the user
# to provision wifi credentials to the device.
esp32_improv:
  authorizer: none

# To have a "next url" for improv serial
web_server:

text_sensor:
    - platform: homeassistant
      id: varanda_201
      entity_id: binary_sensor.flat_201_varanda_contact
      internal: true

    - platform: homeassistant
      id: varanda_202
      entity_id: binary_sensor.flat_202_varanda_contact
      internal: true

    - platform: homeassistant
      id: varanda_203
      entity_id: binary_sensor.flat_203_varanda_contact
      internal: true

    - platform: homeassistant
      id: varanda_204
      entity_id: binary_sensor.flat_204_varanda_contact
      internal: true

    - platform: homeassistant
      id: varanda_205
      entity_id: binary_sensor.flat_205_varanda_contact
      internal: true

    - platform: homeassistant
      id: sensor_simples
      entity_id: sensor.sensor_simples_temperature
      internal: true
      filters:
        - substitute:
          - "off -> fechado"
          - "on -> aberto"

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO9
      mode: INPUT_PULLUP
      inverted: true
    name: "SW Knob change page"
    on_press:
      then:
        - display.page.show_next: lcd_display

sensor:
  - platform: rotary_encoder
    name: "Rotary Encoder"
    pin_a:
      number: GPIO10
    pin_b:
      number: GPIO6
    resolution: 1
    min_value: 0
    max_value: 100
    on_clockwise:
      then:
        # - logger.log: "Turned Clockwise"
        - display.page.show_next: lcd_display
    on_anticlockwise:
      then:
        - display.page.show_previous: lcd_display
        # - logger.log: "Turned Anticlockwise"

external_components:
  - source: github://smkent/esphome@main
    components: [ gc9a01 ]

# switch:
#   - platform: gpio
#     pin:
#       number: 8 # on-board LED GPIO8 does not work, so GPIO3 is used
#       mode: output # o 3 est√° ligado no speaker
#     id: led

spi:
  clk_pin: GPIO1
  mosi_pin: GPIO0

display:
  - platform: gc9a01
    id: lcd_display
    cs_pin: GPIO7
    dc_pin: GPIO2
    update_interval: 1.25s
    rotation: 270
    width: 240
    height: 240
    pages:
      - id: page1
        lambda: |-
          it.image(20, 20, id(logo_ondas));
          it.printf(120, 35, id(font_16), id(color_black), TextAlign::CENTER, "V.201: %s", id(varanda_201).state.c_str());
          it.printf(120, 50, id(font_16), id(color_black), TextAlign::CENTER, "V.202: %s", id(varanda_202).state.c_str());
          it.printf(120, 65, id(font_16), id(color_black), TextAlign::CENTER, "V.203: %s", id(varanda_203).state.c_str());
          it.printf(120, 80, id(font_16), id(color_black), TextAlign::CENTER, "V.204: %s", id(varanda_204).state.c_str());
          it.printf(120, 95, id(font_16), id(color_black), TextAlign::CENTER, "V.205: %s", id(varanda_205).state.c_str());
          it.printf(120, 110, id(font_20), id(color_purple), TextAlign::CENTER, "Temp: %s", id(sensor_simples).state.c_str());
          it.strftime(120, 210, id(font_16), id(color_black), TextAlign::CENTER, "%H:%M", id(esptime).now());
          it.strftime(120, 195, id(font_16), id(color_black), TextAlign::CENTER, "%c", id(esptime).now());
      - id: page2
        lambda: |-
          it.image(20, 20, id(logo_ondas));
          it.printf(120, 35, id(font_20), id(color_black), TextAlign::CENTER, "V.201: %s", id(varanda_201).state.c_str());
          it.strftime(120, 200, id(font_16), id(color_black), TextAlign::CENTER, "%X - %x", id(esptime).now());
      - id: page3
        lambda: |-
          it.image(20, 20, id(logo_ondas));
          it.printf(120, 35, id(font_20), id(color_black), TextAlign::CENTER, "V.202: %s", id(varanda_202).state.c_str());
          it.strftime(120, 200, id(font_16), id(color_black), TextAlign::CENTER, "%X - %x", id(esptime).now());
      - id: page4
        lambda: |-
          it.image(20, 20, id(logo_ondas));
          it.printf(120, 35, id(font_20), id(color_black), TextAlign::CENTER, "V.203: %s", id(varanda_203).state.c_str());
          it.strftime(120, 200, id(font_16), id(color_black), TextAlign::CENTER, "%X - %x", id(esptime).now());
      - id: page5
        lambda: |-
          it.image(20, 20, id(logo_ondas));
          it.printf(120, 35, id(font_20), id(color_black), TextAlign::CENTER, "V.204: %s", id(varanda_204).state.c_str());
          it.strftime(120, 200, id(font_16), id(color_black), TextAlign::CENTER, "%X - %x", id(esptime).now());
      - id: page6
        lambda: |-
          it.image(20, 20, id(logo_ondas));
          it.printf(120, 35, id(font_20), id(color_black), TextAlign::CENTER, "V.205: %s", id(varanda_205).state.c_str());
          it.strftime(120, 200, id(font_16), id(color_black), TextAlign::CENTER, "%X - %x", id(esptime).now());
      - id: page7
        lambda: |-
          it.image(20, 20, id(logo_ondas));
          it.printf(120, 35, id(font_20), id(color_purple), TextAlign::CENTER, "Temp: %s", id(sensor_simples).state.c_str());
          it.strftime(120, 200, id(font_16), id(color_black), TextAlign::CENTER, "%X - %x", id(esptime).now());
      - id: page8
        lambda: |-
          it.image(20, 20, id(logo_ondas));
          it.strftime(120, 200, id(font_16), id(color_black), TextAlign::CENTER, "%X - %x", id(esptime).now());

interval:
  - interval: 5s
    then:
      - display.page.show_next: lcd_display
      - component.update: lcd_display
  # - interval: 2s
  #   then:
  #     - switch.toggle: led
  #     - logger.log: "LED toggling"
    
font:
  - file: 'fonts/OpenSans-Medium.ttf'
    id: font_16
    size: 16

  - file: 'fonts/OpenSans-Medium.ttf'
    id: font_20
    size: 20

color:
  - id: color_black
    red: 0%
    green: 0%
    blue: 0%

  - id: color_purple
    red: 27%
    green: 13%
    blue: 37%
